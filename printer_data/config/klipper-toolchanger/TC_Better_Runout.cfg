#####################################################################
#           Infinite Spool Toolchanger Macros                       #
#                                                                   #
# This set of macros provides an "infinite spool" functionality     #
# for toolchanger printers. It allows a filament runout to trigger  #
# a swap to a different toolhead with a matching filament type and  #
# color. It requires the 'save_variables' extension to be enabled.  #
#####################################################################

[gcode_macro SET_FILAMENT_INFO]
description: Sets the filament type and color for a specific toolhead.
# Usage Example in your start G-code or manually before a print:
# SET_FILAMENT_INFO TOOL=0 TYPE="PLA" COLOR="BLACK"
# SET_FILAMENT_INFO TOOL=1 TYPE="PLA" COLOR="WHITE"
# SET_FILAMENT_INFO TOOL=2 TYPE="PETG" COLOR="RED"
gcode:
    {% set tool = params.TOOL | int %}
    {% set type = params.TYPE | string %}
    {% set color = params.COLOR | string %}

    # Define the variable names based on the tool number
    {% set type_var_name = "t" ~ tool ~ "_type" %}
    {% set color_var_name = "t" ~ tool ~ "_color" %}

    # Store the filament info using the SAVE_VARIABLE command
    SAVE_VARIABLE VARIABLE={type_var_name} VALUE='"{type}"'
    SAVE_VARIABLE VARIABLE={color_var_name} VALUE='"{color}"'

    RESPOND MSG="Set filament info for tool T{tool}: Type={type}, Color={color}"

#####################################################################
#             Main Macro for Filament Runout                        #
#                                                                   #
# This is the macro you will call from your filament sensor. It     #
# checks for a matching spool and performs the tool change or pause.#
#                                                                   #
# To use, add this line to your [filament_switch_sensor] or         #
# [filament_motion_sensor] section in printer.cfg:                  #
# runout_gcode: CHECK_AND_SWAP_SPOOL                                #
#####################################################################

[gcode_macro CHECK_AND_SWAP_SPOOL]
description: Searches for a matching filament spool and swaps to it on runout.
gcode:
    # Get the current toolhead that ran out of filament.
    {% set current_tool = printer.toolhead.active_tool | int %}

    # Retrieve the saved variables for the current tool's filament type and color.
    # We use a temporary variable for the key to handle the lookup.
    {% set type_key = "t" ~ current_tool ~ "_type" %}
    {% set current_type = printer.save_variables.variables.get(type_key, "N/A") %}

    {% set color_key = "t" ~ current_tool ~ "_color" %}
    {% set current_color = printer.save_variables.variables.get(color_key, "N/A") %}

    RESPOND MSG="Filament runout detected on tool T{current_tool}."
    RESPOND MSG="Looking for a replacement spool of {current_color} {current_type}..."

    # Initialize a variable to track if a match is found
    {% set match_found = False %}

    # Loop through all possible toolheads to find a match.
    # We will only perform the actions if a match has not been found yet.
    {% for new_tool in range(printer.tool_vars.num_tools) %}
        # Only proceed if a match hasn't already been found.
        {% if not match_found %}
            # Check if the new tool is not the current tool.
            {% if new_tool != current_tool %}

                # Retrieve the saved variables for the potential new toolhead
                {% set new_type_key = "t" ~ new_tool ~ "_type" %}
                {% set new_type = printer.save_variables.variables.get(new_type_key, "N/A") %}

                {% set new_color_key = "t" ~ new_tool ~ "_color" %}
                {% set new_color = printer.save_variables.variables.get(new_color_key, "N/A") %}

                # Check for a match in both type and color.
                {% if new_type == current_type and new_color == current_color %}
                    RESPOND MSG="Found a matching spool on T{new_tool}! Swapping..."
                    
                    # --- LOGIC FOR HEATING THE NEW TOOLHEAD ---
                    # Get the target temperature from the current hotend.
                    {% set target_temp = printer.toolhead.get_toolhead.target_temp %}
                    
                    # Dynamically create the new extruder's name.
                    {% set extruder_name = "extruder" if new_tool == 0 else "extruder" ~ new_tool %}

                    # Switch to the new toolhead.
                    G91                                                 ; switch to relative positioning
                    G1 E-5 F1800                                        ; retract a bit before change
                    T{new_tool}                                         ; perform the tool change

                    # Heat the new toolhead to the target temperature.
                    RESPOND MSG="Heating new toolhead T{new_tool} to {target_temp}Â°C..."
                    SET_HEATER_TEMPERATURE HEATER={extruder_name} TARGET={target_temp}
                    M116                                                ; wait for the new toolhead to reach temp
                    
                    RESPOND MSG="Tool change complete. Resuming print."
                    SET_PRINT_STATS_INFO ADD_TIME=0                     ; stop filament timer on old tool
                    SET_PRINT_STATS_INFO ADD_TIME=0                     ; restart filament timer on new tool
                    RESUME                                              ; resume the print
                    {% set match_found = True %}
                {% endif %}
            {% endif %}
        {% endif %}
    {% endfor %}

    # If the loop completes without finding a match, pause the print.
    {% if not match_found %}
        RESPOND MSG="No matching filament found on any other toolhead. Pausing print."
        PAUSE
    {% endif %}

