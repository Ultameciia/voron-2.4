# https://github.com/viesturz/klipper-toolchanger/blob/main/macros.cfg

[gcode_macro DOCK_SEQUENCE]
gcode:
  {% for i in range(0, params.REPS | int)  %}
    T0
    G4 P1000
    T1
    G4 P1000
  {% endfor %}

[gcode_macro _TAP_PROBE_ACTIVATE]
description: Ensure safe temp for bed probing
gcode:
    {% set max_temp = 170 %}
    {% set actual_temp = printer[params.HEATER].temperature %}
    {% set target_temp = printer[params.HEATER].target %}
    {% if target_temp > max_temp %}
        { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (target_temp, max_temp)) }
        SET_HEATER_TEMPERATURE HEATER={params.HEATER} TARGET={ max_temp|int - 5 }
    {% endif %}
    # Temperature target is already low enough, but nozzle may still be too hot.
    {% if actual_temp > max_temp  + 2 %}
        { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (actual_temp, max_temp)) }
        TEMPERATURE_WAIT SENSOR={params.HEATER} MAXIMUM={ max_temp }
    {% endif %}

[gcode_macro _WAIT_FOR_TEMP_WITHIN_TOLERANCE]
description: Wait for temp to get within tolerance
gcode:
    {% set tolerance = params.TOLERANCE | float  %}
    {% set actual = printer[params.HEATER].temperature | float %}
    {% set target = printer[params.HEATER].target | float %}
    {% if target != 0 and ((actual < (target - tolerance)) or (actual > (target + tolerance))) %}
        { action_respond_info('Extruder temperature %.1fC is not within %.1fC of %.1fC target; waiting...' % (actual, tolerance, target)) }
        RESPOND TYPE=echo MSG='TEMPERATURE_WAIT SENSOR={params.HEATER} MINIMUM={target - tolerance} MAXIMUM={target + tolerance}'
        TEMPERATURE_WAIT SENSOR={params.HEATER} MINIMUM={target - tolerance} MAXIMUM={target + tolerance}
    {% endif %}

[gcode_macro M104]
rename_existing: M104.1
description: [T<index>] [S<temperature>]
  Set tool temperature.
  T= Tool number, optional. If this parameter is not provided, the current tool is used.
  S= Target temperature
gcode:
  {% if params.T is defined %}
    {% set newparameters = "" %}
    {% set newparameters = newparameters ~ " T="~params.T %}
    {% if params.S is defined %}
      {% set newparameters = newparameters ~ " TARGET="~params.S %}
    {% endif %}
    SET_TOOL_TEMPERATURE{newparameters}
  {% else %}
    M104.1 {rawparams}
  {% endif %}

[gcode_macro M109]
rename_existing: M109.1
description: [T<index>] [S<temperature>]
  Set tool temperature and wait.
  T= Tool number, optional. If this parameter is not provided, the current tool is used.
  S= Target temperature
gcode:
  {% if params.T is defined %}
    {% set newparameters = "" %}
    {% set newparameters = newparameters ~ " T="~params.T %}
    {% if params.S is defined %}
      {% set newparameters = newparameters ~ " TARGET="~params.S %}
    {% endif %}
    SET_TOOL_TEMPERATURE WAIT=1 {newparameters}
  {% else %}
    M109.1 {rawparams}
  {% endif %}

[gcode_macro X_OFFSET_INCREASE01]
description: Increase the gcode offset for X by 0.1mm for T1
gcode:
    {% set svf = printer.save_variables.variables %}
    # Increase the X offset value by 0.10
    {% set new_val_x = svf.t1_offset_x|float|round(3) + 0.100|round(3) %}
    SAVE_VARIABLE VARIABLE=t1_offset_x VALUE={new_val_x|float|round(3)}
    {% if printer.toolchanger.tool_number == 1 %}
      # We are currently using T1, updage the gcode offset NOW
      SET_GCODE_OFFSET X={new_val_x|float|round(3)} MOVE=1
    {% endif %}
    # Show us the saved offsets
    RESPOND MSG="X: {new_val_x|float|round(3)}"
    RESPOND MSG="X Offset updated to:"

[gcode_macro X_OFFSET_INCREASE005]
description: Increase the gcode offset for X by 0.05mm for T1
gcode:
    {% set svf = printer.save_variables.variables %}
    # Increase the X offset value by 0.050
    {% set new_val_x = svf.t1_offset_x|float|round(3) + 0.050|round(3) %}
    SAVE_VARIABLE VARIABLE=t1_offset_x VALUE={new_val_x|float|round(3)}
    {% if printer.toolchanger.tool_number == 1 %}
      # We are currently using T1, updage the gcode offset NOW
      SET_GCODE_OFFSET X={new_val_x|float|round(3)} MOVE=1
    {% endif %}
    # Show us the saved offsets
    RESPOND MSG="X: {new_val_x|float|round(3)}"
    RESPOND MSG="X Offset updated to:"

[gcode_macro X_OFFSET_DECREASE01]
description: Increase the gcode offset for X by 0.1mm for T1
gcode:
    {% set svf = printer.save_variables.variables %}
    # Decrease the X offset value by 0.10
    {% set new_val_x = svf.t1_offset_x|float|round(3) - 0.100|round(3) %}
    SAVE_VARIABLE VARIABLE=t1_offset_x VALUE={new_val_x|float|round(3)}
    {% if printer.toolchanger.tool_number == 1 %}
      # We are currently using T1, updage the gcode offset NOW
      SET_GCODE_OFFSET X={new_val_x|float|round(3)} MOVE=1
    {% endif %}
    # Show us the saved offsets
    RESPOND MSG="X: {new_val_x|float|round(3)}"
    RESPOND MSG="X Offset updated to:"

[gcode_macro X_OFFSET_DECREASE005]
description: Decrease the gcode offset for X by 0.05mm for T1
gcode:
    {% set svf = printer.save_variables.variables %}
    # Decrease the X offset value by 0.050
    {% set new_val_x = svf.t1_offset_x|float|round(3) - 0.050|round(3) %}
    SAVE_VARIABLE VARIABLE=t1_offset_x VALUE={new_val_x|float|round(3)}
    {% if printer.toolchanger.tool_number == 1 %}
      # We are currently using T1, updage the gcode offset NOW
      SET_GCODE_OFFSET X={new_val_x|float|round(3)} MOVE=1
    {% endif %}
    # Show us the saved offsets
    RESPOND MSG="X: {new_val_x|float|round(3)}"
    RESPOND MSG="X Offset updated to:"

[gcode_macro Y_OFFSET_INCREASE01]
description: Increase the gcode offset for Y by 0.1mm for T1
gcode:
    {% set svf = printer.save_variables.variables %}
    # Increase the Y offset value by 0.10
    {% set new_val_y= svf.t1_offset_y|float|round(3) + 0.100|round(3) %}
    SAVE_VARIABLE VARIABLE=t1_offset_y VALUE={new_val_y|float|round(3)}
    {% if printer.toolchanger.tool_number == 1 %}
      # We are currently using T1, updage the gcode offset NOW
      SET_GCODE_OFFSET Y={new_val_y|float|round(3)} MOVE=1
    {% endif %}
    # Show us the saved offsets
    RESPOND MSG="Y: {new_val_y|float|round(3)}"
    RESPOND MSG="Y Offset updated to:"

[gcode_macro Y_OFFSET_INCREASE005]
description: Increase the gcode offset for Y by 0.05mm for T1
gcode:
    {% set svf = printer.save_variables.variables %}
    # Increase the Y offset value by 0.050
    {% set new_val_y= svf.t1_offset_y|float|round(3) + 0.050|round(3) %}
    SAVE_VARIABLE VARIABLE=t1_offset_y VALUE={new_val_y|float|round(3)}
    {% if printer.toolchanger.tool_number == 1 %}
      # We are currently using T1, updage the gcode offset NOW
      SET_GCODE_OFFSET Y={new_val_y|float|round(3)} MOVE=1
    {% endif %}
    # Show us the saved offsets
    RESPOND MSG="Y: {new_val_y|float|round(3)}"
    RESPOND MSG="Y Offset updated to:"

[gcode_macro Y_OFFSET_DECREASE01]
description: Decrease the gcode offset for Y by 0.1mm for T1
gcode:
    {% set svf = printer.save_variables.variables %}
    # Decrease the Y offset value by 0.10
    {% set new_val_y= svf.t1_offset_y|float|round(3) - 0.100|round(3) %}
    SAVE_VARIABLE VARIABLE=t1_offset_y VALUE={new_val_y|float|round(3)}
    {% if printer.toolchanger.tool_number == 1 %}
      # We are currently using T1, updage the gcode offset NOW
      SET_GCODE_OFFSET Y={new_val_y|float|round(3)} MOVE=1
    {% endif %}
    # Show us the saved offsets
    RESPOND MSG="Y: {new_val_y|float|round(3)}"
    RESPOND MSG="Y Offset updated to:"

[gcode_macro Y_OFFSET_DECREASE005]
description: Decrease the gcode offset for Y by 0.05mm for T1
gcode:
    {% set svf = printer.save_variables.variables %}
    # Decrease the Y offset value by 0.050
    {% set new_val_y= svf.t1_offset_y|float|round(3) - 0.050|round(3) %}
    SAVE_VARIABLE VARIABLE=t1_offset_y VALUE={new_val_y|float|round(3)}
    {% if printer.toolchanger.tool_number == 1 %}
      # We are currently using T1, updage the gcode offset NOW
      SET_GCODE_OFFSET Y={new_val_y|float|round(3)} MOVE=1
    {% endif %}
    # Show us the saved offsets
    RESPOND MSG="Y: {new_val_y|float|round(3)}"
    RESPOND MSG="Y Offset updated to:"

[gcode_macro Z_OFFSET_INCREASE005]
description: Increase the gcode offset for Z by 0.05mm for T1
gcode:
    {% set svf = printer.save_variables.variables %}
    # Increase the Z offset value by 0.05
    {% set new_val_z= svf.t1_offset_z|float|round(3) + 0.050|round(3) %}
    SAVE_VARIABLE VARIABLE=t1_offset_z VALUE={new_val_z|float|round(3)}
    {% if printer.toolchanger.tool_number == 1 %}
      # We are currently using T1, updage the gcode offset NOW
      SET_GCODE_OFFSET Z_ADJUST=0.05 MOVE=1
    {% endif %}
    # Show us the saved offsets
    RESPOND MSG="Z: {new_val_z|float|round(3)}"
    RESPOND MSG="Z Offset updated to:"

[gcode_macro Z_OFFSET_INCREASE0025]
description: Increase the gcode offset for Z by 0.025mm for T1
gcode:
    {% set svf = printer.save_variables.variables %}
    # Increase the Z offset value by 0.025
    {% set new_val_z= svf.t1_offset_z|float|round(3) + 0.025|round(3) %}
    SAVE_VARIABLE VARIABLE=t1_offset_z VALUE={new_val_z|float|round(3)}
    {% if printer.toolchanger.tool_number == 1 %}
      # We are currently using T1, updage the gcode offset NOW
      SET_GCODE_OFFSET Z_ADJUST=0.025 MOVE=1
    {% endif %}
    # Show us the saved offsets
    RESPOND MSG="Z: {new_val_z|float|round(3)}"
    RESPOND MSG="Z Offset updated to:"

[gcode_macro Z_OFFSET_DECREASE005]
description: Decrease the gcode offset for Z by 0.05mm for T1
gcode:
    {% set svf = printer.save_variables.variables %}
    # Decrease the Z offset value by 0.05
    {% set new_val_z= svf.t1_offset_z|float|round(3) - 0.050|round(3) %}
    SAVE_VARIABLE VARIABLE=t1_offset_z VALUE={new_val_z|float|round(3)}
    {% if printer.toolchanger.tool_number == 1 %}
      # We are currently using T1, updage the gcode offset NOW
      SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1
    {% endif %}
    # Show us the saved offsets
    RESPOND MSG="Z: {new_val_z|float|round(3)}"
    RESPOND MSG="Z Offset updated to:"

[gcode_macro Z_OFFSET_DECREASE0025]
description: Decrease the gcode offset for Z by 0.025mm for T1
gcode:
    {% set svf = printer.save_variables.variables %}
    # Decrease the Z offset value by 0.025
    {% set new_val_z= svf.t1_offset_z|float|round(3) - 0.025|round(3) %}
    SAVE_VARIABLE VARIABLE=t1_offset_z VALUE={new_val_z|float|round(3)}
    {% if printer.toolchanger.tool_number == 1 %}
      # We are currently using T1, updage the gcode offset NOW
      SET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=1
    {% endif %}
    # Show us the saved offsets
    RESPOND MSG="Z: {new_val_z|float|round(3)}"
    RESPOND MSG="Z Offset updated to:"

[gcode_macro prime_active_tool]
gcode:
    {% set tool = params.T|int %}
    RESPOND MSG="Tool: {tool}"
    # Print the perimeter and left side with T0
    {% if tool == 0 %}
      _PRIME_LEFT
    {% else %}
      _PRIME_RIGHT
    {% endif %}

[gcode_macro _prime_left]
gcode:
  G0 X135 Y4 F10000                           # Go to starting point
  G0 Z0.4                                               # Raise Z to 0.4
  G91                                                   # Incremental positioning 
  G1 X100 E20 F1000                                     # Primeline
  G90                                                   # Absolute position

[gcode_macro _prime_right]
gcode:
  G0 X135 Y8 F10000                           # Go to starting point
  G0 Z0.4                                               # Raise Z to 0.4
  G91                                                   # Incremental positioning 
  G1 X100 E20 F1000                                     # Primeline
  G90                                                   # Absolute position

[gcode_macro _CHANGE_TOOL]
description: Changes tools, updates offsets and transfers fan control to the next tool head.
  If tool head LEDs are defined, will set READY, BUSY, or PRINTING.
  Usage: _CHANGE_TOOL T={tool_number}
gcode:
  {% set tool_number = params.T|int %}
  {% set svf = printer.save_variables.variables %}
  {% set modified_z = 0.0 %}
  {% set last_tool = printer.toolchanger.tool_number|int %}
  {% if last_tool|int >= 0 %}
    # Grab the current tool number so we can remove any z offset that is present
    {% set z_offset_val = svf[ 't' + printer.toolchanger.tool_number|string + '_offset_z'] %}
    # Subtract the tool z_offset from the homing_origin, the remainder is any tweaked z offset
    {% set modified_z = printer.gcode_move.homing_origin.z|float|round(3) - z_offset_val|float|round(3) %}
    # Grab the current print fan speed
    {% set active_fan = "fan_generic part_fan_t" + printer.toolchanger.tool_number|string %}
    {% set fan_speed = printer[active_fan].speed|float|round(2) %}
    # Shutdown the active part cooling fan
    SET_FAN_SPEED FAN="part_fan_t{printer.toolchanger.tool_number|string}" SPEED=0
    # Clear the offsets set by macros
    SET_GCODE_OFFSET X=0 Y=0 Z=0 MOVE=1
    # Update toolhead lights if applicable
    {% if printer["gcode_macro _sb_vars"] is defined %}
      STATUS_READY
    {% endif %}
  {% endif %}
  # Activate the selected tool
  SELECT_TOOL T={tool_number}
  # Apply the macro offsets, including modified z settings
  SET_GCODE_OFFSET X={svf[ 't' + tool_number|string + '_offset_x']|float|round(3)} Y={svf[ 't' + tool_number|string + '_offset_y']|float|round(3)} Z={svf[ 't' + tool_number|string + '_offset_z']|float + modified_z|float|round(3)} MOVE=1
  # Transfer the print fan speed to the active tool head
  {% if last_tool|int >= 0 %}
    SET_FAN_SPEED FAN="part_fan_t{tool_number}" SPEED={fan_speed}
  {% endif %}
  # Update toolhead lights if applicable
  {% if printer["gcode_macro _sb_vars"] is defined %}
    {% if printer.idle_timeout.state != "Printing" %}
      STATUS_BUSY
    {% else %}
      STATUS_PRINTING
    {% endif %}
  {% endif %}
  # Update the current tool variable in the save file
  SAVE_VARIABLE VARIABLE=current_tool VALUE={tool_number}

[gcode_macro _CRASH_DETECTION]
variable_tool_change: False
gcode:
    {% set active_tool = printer.toolchanger.tool_number|int %}
    {% set calling_tool = params.TOOL|int %}
    {% if calling_tool == active_tool and tool_change == False %}
        RESPOND TYPE=error MSG='Tool not detected, expected {printer.toolchanger.tool_number}. Pausing the print.'
        PAUSE
    {% endif %} 